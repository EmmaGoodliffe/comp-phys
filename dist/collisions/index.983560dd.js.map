{"mappings":"iTAAgCA,ECS5BC,EAEAC,EACAC,EAEAC,EACAC,ECbiBC,aAGnB,SAAAA,EAAYC,EAAcC,GAAuC,IAArBC,EAAqBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjB,EAAUG,EAAOH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAH,EAAGI,EAAAC,KAAAT,GAAAS,KAAvCP,EAAAA,EAAuCO,KAArBN,EAAAA,EAAqBM,KAAPF,EAAAA,EACxDE,KAAKC,EAAI,GACTD,KAAKE,EAAIV,EAAEW,OAASH,KAAKC,0DAGzBD,KAAKP,GAAKO,KAAKF,kCAETM,GAEN,OADoBJ,KAAKP,EAAIO,KAAKC,EAAIG,EAAMX,iCAGvCW,GACL,IAAMC,EAAOL,KAAKN,EAAIU,EAAMV,EACtBY,EAAQN,KAAKN,EAAIU,EAAMV,EAIvBa,EAAKH,EAAMV,EAAIU,EAAMN,EAI3B,OAHkBQ,EAAQN,KAAKF,EAAI,EAAIS,GACnBF,+BAIjBb,GACHA,EAAEgB,KAAKR,KAAKP,EAAGO,KAAKE,EAAGF,KAAKC,EAAGD,KAAKC,wCDzBlCT,EAAI,KDJsBP,QAClBA,EAAEwB,WAAaxB,EAAEyB,QAAUzB,ICGxB,eAGb0B,EAAoB,GACpBC,EAAa,EAEbC,EAAa,EAOXC,EAAQ,YACZH,EAAU,IACFI,KAAK,IAAAC,EAAWxB,EAAG,IAAK,IAChC,IAAMyB,EAAEC,KAAAC,IAAG,IAAON,GAClBF,EAAQI,KAAK,IAAAC,EAAWxB,EAAG,IAAKyB,GAAK,IACrCL,EAAa,GAGfpB,EAAE4B,MAAQ,WACR5B,EAAE6B,aAAa,IAAK,KAEpBP,IAEA5B,EAAMM,EAAE8B,YAERlC,EAAeI,EAAE8B,YAEjBnC,EAASK,EAAE+B,aAAa,EAAG,EAAG,GAEhB/B,EAAEgC,aAAa,SACjBC,aAAaX,GAEzBxB,EAAeE,EAAE8B,aAGnB9B,EAAEkC,KAAO,WACPlC,EAAEmC,WAAW,KACb,IAAK,IAAIC,EAAI,EAAGA,EAAIvC,EAAWuC,IAAK,CAElC,GAAIjB,EAAQ,GAAGkB,QAAQlB,EAAQ,IAAK,CAClC,IAAMmB,EAAKnB,EAAQ,GAAGoB,OAAOpB,EAAQ,IAC/BqB,EAAKrB,EAAQ,GAAGoB,OAAOpB,EAAQ,IACrCA,EAAQ,GAAGb,EAAIgC,EACfnB,EAAQ,GAAGb,EAAIkC,EACfpB,IAGED,EAAQ,GAAGlB,GAAK,IAClBkB,EAAQ,GAAGb,IAAM,EACjBc,KAGFD,EAAQ,GAAGsB,SACXtB,EAAQ,GAAGsB,SAGbtB,EAAQ,GAAGe,KAAKlC,GAChBmB,EAAQ,GAAGe,KAAKlC,GAEhBA,EAAE0C,KAAK,EAAG,EAAG,EAAG1C,EAAEW,QAElBX,EAAE2C,KAAK,KACPjD,EAAIkD,KAAJ,yBAAAC,OAAkCzB,IAClCC,EAAayB,WAAU,GAAAD,OAAIlD,EAAOoD,UAClCnD,EAAagD,KAAb,uBAAAC,OAAyCxB,EAAzC,WACAxB,EExEyB,SAACmD,GAC1B,GAAU,IAANA,EACF,OAAO,EACF,GAAIA,EAAI,EACb,OAAOA,EACF,GAAU,IAANA,EACT,OAAW,EAAJA,EACF,GAAU,IAANA,EACT,OAAW,GAAJA,EACF,GAAIA,GAAK,EACd,OAAOtB,KAAKuB,MAALvB,KAAAC,IAAW,GAAOqB,EAAI,IAE/B,KAAM,mCF4DME,CAAmB7B,GAC/BvB,EAAa8C,KAAb,SAAAC,OAA2BhD,EAA3B","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./src/collisions/index.ts","./src/collisions/Square.ts","./src/collisions/calculateTimeSteps.ts"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","import p5 from \"p5\";\nimport calculateTimeSteps from \"./calculateTimeSteps\";\nimport Square from \"./Square\";\n\nconst _ = new p5(() => {});\n\n// Initialise\nlet squares: Square[] = [];\nlet collisions = 0;\nlet div: p5.Element;\nlet indexRatio = 0;\nlet slider: p5.Element;\nlet sliderValDiv: p5.Element;\nlet startButton;\nlet timeSteps: number;\nlet timeStepsDiv: p5.Element;\n\nconst start = () => {\n  squares = [];\n  squares.push(new Square(_, 100, 1));\n  const m2 = 100 ** indexRatio;\n  squares.push(new Square(_, 200, m2, -1));\n  collisions = 0;\n};\n\n_.setup = () => {\n  _.createCanvas(400, 400);\n  // Create 2 squares\n  start();\n  // Create div for displaying number of collisions\n  div = _.createDiv();\n  // Create div for display slider value\n  sliderValDiv = _.createDiv();\n  // Create slider\n  slider = _.createSlider(0, 8, 0);\n  // Create start button\n  startButton = _.createButton(\"Start\");\n  startButton.mousePressed(start);\n  // Create div for displaying time steps\n  timeStepsDiv = _.createDiv();\n};\n\n_.draw = () => {\n  _.background(255);\n  for (let i = 0; i < timeSteps; i++) {\n    // If they are colliding, bounce them off each other\n    if (squares[0].collide(squares[1])) {\n      const v1 = squares[0].bounce(squares[1]);\n      const v2 = squares[1].bounce(squares[0]);\n      squares[0].v = v1;\n      squares[1].v = v2;\n      collisions++;\n    }\n    // If the first one is touching the wall, invert its velocity\n    if (squares[0].x <= 0) {\n      squares[0].v *= -1;\n      collisions++;\n    }\n    // Update squares\n    squares[0].update();\n    squares[1].update();\n  }\n  // Draw squares\n  squares[0].draw(_);\n  squares[1].draw(_);\n  // Draw wall\n  _.line(0, 0, 0, _.height);\n  // Show number of collisions\n  _.fill(255);\n  div.html(`Number of collisions: ${collisions}`);\n  indexRatio = parseFloat(`${slider.value()}`);\n  sliderValDiv.html(`Mass ratio: 100<sup>${indexRatio}</sup>`);\n  timeSteps = calculateTimeSteps(indexRatio);\n  timeStepsDiv.html(`Time: ${timeSteps}x`);\n};\n","import p5 from \"p5\";\n\nexport default class Square {\n  w: number;\n  y: number;\n  constructor(_: p5, public x: number, public m = 1, public v = 0) {\n    this.w = 20;\n    this.y = _.height - this.w;\n  }\n  update(): void {\n    this.x += this.v;\n  }\n  collide(other: Square): boolean {\n    const overlapping = this.x + this.w > other.x;\n    return overlapping;\n  }\n  bounce(other: Square): number {\n    const sumM = this.m + other.m;\n    const diffM = this.m - other.m;\n    // v = (dm * v1) + (2 * p2)\n    //     --------------------\n    //     m1 + m2\n    const p2 = other.m * other.v;\n    const numerator = diffM * this.v + 2 * p2;\n    const denominator = sumM;\n    const fraction = numerator / denominator;\n    return fraction;\n  }\n  draw(_: p5): void {\n    _.rect(this.x, this.y, this.w, this.w);\n  }\n}\n","const calculateTimeSteps = (p: number): number => {\n  if (p === 0) {\n    return 1;\n  } else if (p < 3) {\n    return p;\n  } else if (p === 3) {\n    return p * 3;\n  } else if (p === 4) {\n    return p * 20;\n  } else if (p <= 8) {\n    return Math.floor(10 ** (p - 2));\n  }\n  throw \"Nothing returned from time steps\";\n};\n\nexport default calculateTimeSteps;\n"],"names":["a","div","slider","sliderValDiv","timeSteps","timeStepsDiv","Square","_","x","m","arguments","length","undefined","v","$bd440949e5295423c0317f90790e$var$_classCallCheck","this","w","y","height","other","sumM","diffM","p2","rect","__esModule","default","squares","collisions","indexRatio","start","push","$bd440949e5295423c0317f90790e$export$default","m2","Math","pow","setup","createCanvas","createDiv","createSlider","createButton","mousePressed","draw","background","i","collide","v1","bounce","v2","update","line","fill","html","concat","parseFloat","value","p","floor","$d2c80a6d16791915fd9d373$export$default"],"version":3,"file":"index.983560dd.js.map"}